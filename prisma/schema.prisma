// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  salt      String
  username  String?
  role      String   @default("admin") // admin, kepala unit kerja, anggota
  imgUrl    String?  @map("img_url")
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  UserInfo          UserInfo?
  UnitKerja         UnitKerja[]         @relation("UserUnitKerja")
  KepalaUnitKerja   UnitKerja?          @relation("UserKepalaUnitKerja")
  photoFile         File?               @relation("UserPhoto")
  Kepangkatan       Kepangkatan[]
  AnggotaKeluarga   AnggotaKeluarga[]
  RiwayatPendidikan RiwayatPendidikan[]
  JabatanFungsional JabatanFungsional[]
  Inpasing          Inpasing[]
}

model UserInfo {
  id                  String    @id @default(cuid())
  userId              String    @unique
  NIP                 String?
  GelarDepan          String?   @map("gelar_depan")
  GelarBelakang       String?   @map("gelar_belakang")
  JenisKelamin        String?   @map("jenis_kelamin") // Laki-laki, Perempuan
  TempatLahir         String?   @map("tempat_lahir")
  TanggalLahir        DateTime? @map("tanggal_lahir")
  Alamat              String?
  Phone               String?
  NBM                 String?   @map("nbm")
  NIDN                String?   @map("nidn")
  NIDK                String?   @map("nidk")
  NUPTK               String?   @map("nuptk")
  IDScholar           String?   @map("id_scholar")
  IDScopus            String?   @map("id_scopus")
  IDShinta            String?   @map("id_shinta")
  IDGaruda            String?   @map("id_garuda")
  NPWP                String?   @map("npwp")
  NIK                 String?   @map("nik")
  JabatanStruktural   String?   @map("jabatan_struktural")
  JabatanFungsional   String?   @map("jabatan_fungsional")
  WorkEmail           String?   @map("work_email")
  KTP                 File?     @relation("UserKTP")
  DocNBM              File?     @relation("UserDocNBM")
  DocNIDN             File?     @relation("UserDocNIDN")
  Passport            File?     @relation("UserPassport")
  BPJSKesehatan       File?     @relation("UserDocBPJSKesehatan")
  BPJSKetenagakerjaan File?     @relation("UserDocBPJSKetenagakerjaan")
  SertifikasiDosen    File?     @relation("UserDocSertifikasiDosen")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UnitKerja {
  id                String   @id @default(cuid())
  name              String   @unique
  kepalaUnitKerjaId String?  @unique
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  Anggota         User[] @relation("UserUnitKerja")
  KepalaUnitKerja User?  @relation("UserKepalaUnitKerja", fields: [kepalaUnitKerjaId], references: [id], onDelete: SetNull)

  @@map("unit_kerja")
}

model File {
  id           String    @id @default(cuid())
  filename     String
  originalName String
  path         String
  mimetype     String
  size         Int
  extension    String
  description  String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  deletedAt    DateTime?

  userKTPId String?   @unique @map("user_ktp_id")
  userKTP   UserInfo? @relation("UserKTP", fields: [userKTPId], references: [id], onDelete: Cascade)

  userDocNBMId String?   @unique @map("user_doc_nbm_id")
  userDocNBM   UserInfo? @relation("UserDocNBM", fields: [userDocNBMId], references: [id], onDelete: Cascade)

  userPassportId String?   @unique @map("user_passport_id")
  userPassport   UserInfo? @relation("UserPassport", fields: [userPassportId], references: [id], onDelete: Cascade)

  userDocBPJSKesehatanId String?   @unique @map("user_doc_bpjs_kesehatan_id")
  userDocBPJSKesehatan   UserInfo? @relation("UserDocBPJSKesehatan", fields: [userDocBPJSKesehatanId], references: [id], onDelete: Cascade)

  userDocBPJSKetenagakerjaanId String?   @unique @map("user_doc_bpjs_ketenagakerjaan_id")
  userDocBPJSKetenagakerjaan   UserInfo? @relation("UserDocBPJSKetenagakerjaan", fields: [userDocBPJSKetenagakerjaanId], references: [id], onDelete: Cascade)

  userDocSertifikasiDosenId String?   @unique @map("user_doc_sertifikasi_dosen_id")
  userDocSertifikasiDosen   UserInfo? @relation("UserDocSertifikasiDosen", fields: [userDocSertifikasiDosenId], references: [id], onDelete: Cascade)

  userDocNIDNId String?   @unique @map("user_doc_nidn_id")
  userDocNIDN   UserInfo? @relation("UserDocNIDN", fields: [userDocNIDNId], references: [id], onDelete: Cascade)

  userPhotoId String? @unique @map("user_photo_id")
  userPhoto   User?   @relation("UserPhoto", fields: [userPhotoId], references: [id], onDelete: Cascade)

  Kepangkatan              Kepangkatan?
  JabatanFungsional        JabatanFungsional?
  DokumenRiwayatPendidikan DokumenRiwayatPendidikan?
  Inpasing                 Inpasing?

  @@index([filename])
  @@index([createdAt])
}

model Kepangkatan {
  id                  String    @id @default(cuid())
  userId              String    @map("user_id")
  DokumenSKId         String?   @unique @map("dokumen_sk_id")
  nama                String
  NomorSK             String?   @map("nomor_sk")
  TanggalSK           DateTime? @map("tanggal_sk")
  TMT                 DateTime? @map("tmt")
  TanggalAkhirKontrak DateTime? @map("tanggal_akhir_kontrak")
  JenisSK             String?   @map("jenis_sk")
  GajiPokok           Int?      @map("gaji_pokok")
  DokumenSK           File?     @relation(fields: [DokumenSKId], references: [id], onDelete: Cascade)
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("kepangkatan")
}

model AnggotaKeluarga {
  id                String   @id @default(cuid())
  userId            String   @map("user_id")
  nama              String
  tempatLahir       String?  @map("tempat_lahir")
  agama             String?  @map("agama")
  jenisKelamin      String?  @map("jenis_kelamin")
  nik               String?  @map("nik")
  pendidikan        String?  @map("pendidikan")
  hubunganKeluarga  String?  @map("hubungan_keluarga") // Suami, Istri, Anak, Orang Tua
  tunjanganBeras    String?  @map("tunjangan_beras")
  tunjanganKeluarga String?  @map("tunjangan_keluarga")
  potonganAsuransi  String?  @map("potongan_asuransi")
  tanggunganPajak   String?  @map("tanggungan_pajak")
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("anggota_keluarga")
}

model RiwayatPendidikan {
  id            String   @id @default(cuid())
  userId        String   @map("user_id")
  pendidikan    String
  namaInstitusi String?  @map("nama_institusi")
  tahunLulus    Int?     @map("tahun_lulus")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user                     User                      @relation(fields: [userId], references: [id], onDelete: Cascade)
  DokumenRiwayatPendidikan DokumenRiwayatPendidikan?

  @@map("riwayat_pendidikan")
}

model DokumenRiwayatPendidikan {
  id                  String   @id @default(cuid())
  riwayatPendidikanId String   @unique @map("riwayat_pendidikan_id")
  dokumenId           String   @unique @map("dokumen_id")
  namaDokumen         String?  @map("nama_dokumen")
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  riwayatPendidikan RiwayatPendidikan @relation(fields: [riwayatPendidikanId], references: [id], onDelete: Cascade)
  dokumen           File              @relation(fields: [dokumenId], references: [id], onDelete: Cascade)

  @@map("dokumen_riwayat_pendidikan")
}

model JabatanFungsional {
  id                String    @id @default(cuid())
  userId            String    @map("user_id")
  dokumenSKId       String?   @unique @map("dokumen_sk_id")
  jabatanFungsional String
  nomorSK           String?   @map("nomor_sk")
  tanggalSK         DateTime? @map("tanggal_sk")
  tmt               DateTime? @map("tmt")
  jenis             String?   @map("jenis")
  angkaKredit       Int?      @map("angka_kredit")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  dokumenSK File? @relation(fields: [dokumenSKId], references: [id], onDelete: Cascade)

  @@map("jabatan_fungsional")
}

model Inpasing {
  id          String    @id @default(cuid())
  userId      String    @map("user_id")
  dokumenSKId String?   @unique @map("dokumen_sk_id")
  kepangkatan String    @map("kepangkatan")
  nomorSK     String?   @map("nomor_sk")
  tanggalSK   DateTime? @map("tanggal_sk")
  tmt         DateTime? @map("tmt")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  user      User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  dokumenSK File? @relation(fields: [dokumenSKId], references: [id], onDelete: Cascade)

  @@map("inpasing")
}
